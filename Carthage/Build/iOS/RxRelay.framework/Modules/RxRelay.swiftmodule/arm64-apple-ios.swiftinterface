// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.10 (swiftlang-5.10.0.13 clang-1500.3.9.4)
// swift-module-flags: -target arm64-apple-ios11.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name RxRelay
import Foundation
import RxSwift
import Swift
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
final public class PublishRelay<Element> : RxSwift.ObservableType {
  final public func accept(_ event: Element)
  public init()
  final public func subscribe<Observer>(_ observer: Observer) -> any RxSwift.Disposable where Element == Observer.Element, Observer : RxSwift.ObserverType
  final public func asObservable() -> RxSwift.Observable<Element>
  final public func asInfallible() -> RxSwift.Infallible<Element>
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class ReplayRelay<Element> : RxSwift.ObservableType {
  final public func accept(_ event: Element)
  public static func create(bufferSize: Swift.Int) -> RxRelay.ReplayRelay<Element>
  public static func createUnbound() -> RxRelay.ReplayRelay<Element>
  final public func subscribe<Observer>(_ observer: Observer) -> any RxSwift.Disposable where Element == Observer.Element, Observer : RxSwift.ObserverType
  final public func asObservable() -> RxSwift.Observable<Element>
  final public func asInfallible() -> RxSwift.Infallible<Element>
  @objc deinit
}
final public class BehaviorRelay<Element> : RxSwift.ObservableType {
  final public func accept(_ event: Element)
  final public var value: Element {
    get
  }
  public init(value: Element)
  final public func subscribe<Observer>(_ observer: Observer) -> any RxSwift.Disposable where Element == Observer.Element, Observer : RxSwift.ObserverType
  final public func asObservable() -> RxSwift.Observable<Element>
  final public func asInfallible() -> RxSwift.Infallible<Element>
  @objc deinit
}
extension RxSwift.ObservableType {
  public func bind(to relays: RxRelay.PublishRelay<Self.Element>...) -> any RxSwift.Disposable
  public func bind(to relays: RxRelay.PublishRelay<Self.Element?>...) -> any RxSwift.Disposable
  public func bind(to relays: RxRelay.BehaviorRelay<Self.Element>...) -> any RxSwift.Disposable
  public func bind(to relays: RxRelay.BehaviorRelay<Self.Element?>...) -> any RxSwift.Disposable
  public func bind(to relays: RxRelay.ReplayRelay<Self.Element>...) -> any RxSwift.Disposable
  public func bind(to relays: RxRelay.ReplayRelay<Self.Element?>...) -> any RxSwift.Disposable
}
